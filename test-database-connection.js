const { PrismaClient } = require('@prisma/client');

// Konfiguracje do przetestowania
const configs = [
  {
    name: 'localhost',
    url: 'mysql://srv91710_weddingassistant:XaHtW5sgq42MhtgGjPUh@localhost:3306/srv91710_weddingassistant'
  },
  {
    name: 'www.rabiegadevelopment.pl',
    url: 'mysql://srv91710_weddingassistant:XaHtW5sgq42MhtgGjPUh@www.rabiegadevelopment.pl:3306/srv91710_weddingassistant'
  },
  {
    name: 'h63.seohost.pl',
    url: 'mysql://srv91710_weddingassistant:XaHtW5sgq42MhtgGjPUh@h63.seohost.pl:3306/srv91710_weddingassistant'
  }
];

async function testConnection(config) {
  console.log(`\nüîç Testowanie po≈ÇƒÖczenia z: ${config.name}`);
  console.log(`URL: ${config.url}`);
  
  try {
    // Tworzenie nowego klienta Prisma dla ka≈ºdego testu
    const prisma = new PrismaClient({
      datasources: {
        db: {
          url: config.url
        }
      }
    });

    // Test po≈ÇƒÖczenia - pr√≥ba wykonania prostego zapytania
    const result = await prisma.$queryRaw`SELECT 1 as test`;
    console.log(`‚úÖ SUKCES! Po≈ÇƒÖczenie z ${config.name} dzia≈Ça!`);
    console.log(`   Wynik testu:`, result);
    
    // Sprawdzenie czy baza ma tabele
    try {
      const tables = await prisma.$queryRaw`SHOW TABLES`;
      console.log(`   Liczba tabel w bazie: ${tables.length}`);
      if (tables.length > 0) {
        console.log(`   Pierwsze tabele:`, tables.slice(0, 3).map(t => Object.values(t)[0]));
      }
    } catch (tableError) {
      console.log(`   ‚ö†Ô∏è  Nie mo≈ºna sprawdziƒá tabel: ${tableError.message}`);
    }
    
    await prisma.$disconnect();
    return { success: true, host: config.name, url: config.url };
    
  } catch (error) {
    console.log(`‚ùå B≈ÅƒÑD po≈ÇƒÖczenia z ${config.name}:`);
    console.log(`   ${error.message}`);
    
    if (error.message.includes('ECONNREFUSED')) {
      console.log(`   üí° Host nie akceptuje po≈ÇƒÖcze≈Ñ na porcie 3306`);
    } else if (error.message.includes('Access denied')) {
      console.log(`   üí° Problem z autoryzacjƒÖ - sprawd≈∫ login/has≈Ço`);
    } else if (error.message.includes('Unknown database')) {
      console.log(`   üí° Baza danych nie istnieje`);
    }
    
    return { success: false, host: config.name, error: error.message };
  }
}

async function runTests() {
  console.log('üöÄ Rozpoczynam testowanie po≈ÇƒÖcze≈Ñ z bazƒÖ danych...\n');
  
  const results = [];
  
  for (const config of configs) {
    const result = await testConnection(config);
    results.push(result);
    
    // Kr√≥tka przerwa miƒôdzy testami
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
  
  console.log('\nüìä PODSUMOWANIE TEST√ìW:');
  console.log('========================');
  
  const workingConnections = results.filter(r => r.success);
  
  if (workingConnections.length > 0) {
    console.log(`‚úÖ Dzia≈ÇajƒÖce po≈ÇƒÖczenia (${workingConnections.length}):`);
    workingConnections.forEach(conn => {
      console.log(`   ‚Ä¢ ${conn.host}`);
      console.log(`   ‚Ä¢ URL: ${conn.url}`);
    });
    
    console.log('\nüéØ REKOMENDACJA:');
    console.log(`   U≈ºyj hosta: ${workingConnections[0].host}`);
    console.log(`   W pliku .env ustaw:`);
    console.log(`   DATABASE_URL="${workingConnections[0].url}"`);
    
  } else {
    console.log('‚ùå ≈ªadne po≈ÇƒÖczenie nie dzia≈Ça!');
    console.log('   Sprawd≈∫:');
    console.log('   ‚Ä¢ Czy baza danych zosta≈Ça utworzona');
    console.log('   ‚Ä¢ Czy dane logowania sƒÖ poprawne');
    console.log('   ‚Ä¢ Czy hosting pozwala na po≈ÇƒÖczenia zewnƒôtrzne');
  }
}

// Uruchom testy
runTests().catch(console.error);
